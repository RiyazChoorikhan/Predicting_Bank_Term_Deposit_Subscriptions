# -*- coding: utf-8 -*-
"""Riaz_banking_data_project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GSiF2qyRdoXcAfwtO9qKfnBEV0V-xIP1

# Load Required Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, roc_auc_score

"""# Load datasets"""

train_df = pd.read_csv('/content/drive/MyDrive/data/riyaz_project/train.csv' , sep = ';')
test_df = pd.read_csv('/content/drive/MyDrive/data/riyaz_project/test.csv' , sep = ';')

test_df.shape

train_df.head(5)

df = train_df

df.columns

df.nunique()

df.describe()

"""# Exploratory Data Analysis"""

#Age
sns.histplot(df["age"]  )
plt.show()

sns.boxplot(df["age"] , orient = "h")
plt.show()

new_age = df["age"][df["age"]<= 70]
sns.histplot(new_age )
plt.show()

#job

sns.countplot(df, x="job")
plt.xticks(rotation= 90 )
plt.show()

#Marital

sns.countplot(df , x = "marital")
plt.xticks(rotation = 90)
plt.show()

#Education

sns.countplot(df , x = "education")
plt.xticks(rotation = 90)
plt.show()

#Default

sns.countplot(df , x = "default")
plt.xticks(rotation = 90)
plt.show()

#Balance

sns.histplot(df["balance"] , bins = 100)
plt.show()

sns.boxplot(df["balance"] , orient = "h")
plt.show()

balance_data = df["balance"]

Q1 = np.percentile(balance_data, 25)
Q3 = np.percentile(balance_data, 75)

IQR = Q3 - Q1

lower_whisker = Q1 - 1.5 * IQR
upper_whisker = Q3 + 1.5 * IQR

print(Q1)
print(Q3)

print("Lower whisker:", lower_whisker)
print("Upper whisker:", upper_whisker)

#Housing
sns.countplot(df , x = "housing")
plt.xticks(rotation = 90)
plt.show()

housing_counts = df['housing'].value_counts()
plt.figure(figsize = (6,6))
plt.pie(housing_counts, labels=housing_counts.index, autopct='%1.1f%%', startangle=45)
plt.show()

# Loan -> personal

sns.countplot(df , x = "loan")
plt.xticks(rotation = 90)
plt.show()

#Contact

sns.countplot(df , x = "contact")
plt.xticks(rotation = 90)
plt.show()

#Day
sns.histplot(df["day"] , bins = 31)
plt.show()

#Month

sns.countplot(df , x = "month")
plt.xticks(rotation = 90)
plt.show()

#Duration

sns.countplot(df , x = "month")
plt.xticks(rotation = 90)
plt.show()

sns.boxplot(df["duration"] , orient = "h")
plt.show()

duration_data = df["duration"]

Q1 = np.percentile(duration_data, 25)
Q3 = np.percentile(duration_data, 75)

IQR = Q3 - Q1
upper_whisker = Q3 + 1.5 * IQR

print("Upper whisker:", upper_whisker)

sns.histplot(df["duration"][df["duration"] <= 643])
plt.show()

#Campaign
sns.histplot(df["campaign"] , bins = 63)
plt.show()

sns.boxplot(df["campaign"] , orient = "h")
plt.show()

duration_data = df["campaign"]

Q1 = np.percentile(duration_data, 25)
Q3 = np.percentile(duration_data, 75)

IQR = Q3 - Q1
upper_whisker = Q3 + 1.5 * IQR

print("Upper whisker:", upper_whisker)

sns.histplot(df["campaign"][df["campaign"] <= 6] , bins=6)
plt.show()

#pdays

sns.histplot(df["pdays"])
plt.show()

positive_pdays_count = df["pdays"][df["pdays"] > -1].count()
negative_pdays_count = df["pdays"][df["pdays"] == -1].count()

labels = ['previously contacted', "not previously contacted"]
counts = [positive_pdays_count, negative_pdays_count]

plt.figure(figsize=(8, 6))
plt.pie(counts, labels=labels, autopct='%1.1f%%')
plt.show()

sns.boxplot(df["pdays"] , orient = "h")
plt.show()

pdays_data = df["pdays"]

Q1 = np.percentile(pdays_data, 25)
Q3 = np.percentile(pdays_data, 75)

IQR = Q3 - Q1

lower_whisker = Q1 - 1.5 * IQR
upper_whisker = Q3 + 1.5 * IQR

print("Q1:", Q1)
print("Q3:", Q3)
print("IQR:", IQR)
print("Lower whisker:", lower_whisker)
print("Upper whisker:", upper_whisker)

sns.boxplot(x = df["pdays"][df["pdays"] > -1] , orient="h") #41
plt.show()

new_pdays_data = df["pdays"][df["pdays"] > -1]

Q1 = np.percentile(new_pdays_data, 25)
Q3 = np.percentile(new_pdays_data, 75)

IQR = Q3 - Q1

upper_whisker = Q3 + 1.5 * IQR

print("Upper whisker:", upper_whisker)

sns.histplot(df["pdays"][(df["pdays"] > -1) &(df["pdays"] <= 618 )] , bins = 619)
plt.show()

